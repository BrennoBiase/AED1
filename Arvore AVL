class Node:
    def __init__(self, data, parent=None):
        self.data = data
        self.parent = parent
        self.height = 0
        self.left = None
        self.right = None


class AVLTree:
    def __init__(self):
        self.__root = None

    def insert(self, data):
        # se não houver "nó raiz"
        if not self.__root:
            self.__root = Node(data)   # não passar pelo pai, pois o nó raiz não tem pai
        # se o nó raiz existe
        else:
            self.__insert_data(data, self.__root)

    def remove(self, data):
        try:
            if not self.__root:
                print("Sem dados!")
            else:
                self.__remove_data(data, self.__root)
        except TypeError:
            print("Parametro Incorreto!")

    def __insert_data(self, data, node):
        if data < node.data:
            if node.left:
                self.__insert_data(data, node.left)
            else:
                node.left = Node(data, node)
                self.__violation_handler(node.left)
        if data > node.data:
            if node.right:
                self.__insert_data(data, node.right)
            else:
                node.right = Node(data, node)
                self.__violation_handler(node.right)

    def __remove_data(self, data, node):
        # primeiro temos de encontrar os dados
        if data < node.data:
            if node.left:
                self.__remove_data(data, node.left)
        elif data > node.data:
            if node.right:
                self.__remove_data(data, node.right)
        elif data == node.data:
            # 1) quando o nó a ser removido não tem criança; nó esquerdo
            if not node.left and not node.right:
                parent_node = node.parent
                if parent_node:
                    if parent_node.left == node:
                        parent_node.left = None
                    elif parent_node.right == node:
                        parent_node.right = None
                # se o nó for o nó de raiz
                else:
                    self.__root = None
                del node
                self.__violation_handler(parent_node)
            # 2) quando a criança esquerda existe
            elif node.left and not node.right:
                parent_node = node.parent
                # relação de pai-filho
                if parent_node:
                    if parent_node.left == node:  # Qual queremos remover
                        parent_node.left = node.left
                    elif parent_node.right == node:
                        parent_node.right = node.left
                else:
                    self.__root = node.left
                # relação filho-pai
                node.left.parent = parent_node
                del node
                self.__violation_handler(parent_node)
            # 3) Quando a criança direita existe
            elif node.right and not node.left:
                parent_node = node.parent
                # relação pai-filho
                if parent_node:
                    if parent_node.left == node:  # Qual queremos remover
                        parent_node.left = node.right
                    elif parent_node.right == node:
                        parent_node.right = node.right
                else:
                    self.__root = node.right
                # relação filho-pai
                node.right.parent = parent_node
                del node
                self.__violation_handler(parent_node)
            # 4) quando o nó tem dois filhos
            # a) temos de encontrar ou o nó predecessor ou o nó sucessor
            # b) trocar os valores do nó e de qualquer um dos nós acima mencionados
            # c) eliminar o predecessor ou o sucessor
            elif node.left and node.right:
                # nó sucessor: o nó mais pequeno na sub-árvore direita do "nó".
                successor_node = self.__find_successor(node.right)
                successor_node.data, node.data = node.data, successor_node.data
                self.__remove_data(successor_node.data, node.right)

    def __find_successor(self, node):
        if node.left:
            return self.__find_successor(node.left)
        return node

    def __violation_handler(self, node):
        while node:  # enquanto o nó não é None.
            node.height = max(self.__calculate_height(node.left), self.__calculate_height(node.right)) + 1
            self.__violation_fix(node)
            node = node.parent   # para atravessar até ao nó da raiz

    def __calculate_height(self, node):
        """"altura = max(altura da criança esquerda, altura da criança direita) + 1"""
        if not node:
            return -1
        return node.height

    def __violation_fix(self, node):
        # left left heavy
        if self.__balance_factor(node) > 1:
            # left right heavy
            if self.__balance_factor(node.left) < 0:  # -1 deu-me um loop infinito
                self.__rotate_left(node.left)
            self.__rotate_right(node)
        # right right heavy
        if self.__balance_factor(node) < -1:
            # right left heavy
            if self.__balance_factor(node.right) > 0:  # evitar o loop infinito
                self.__rotate_right(node.right)
            self.__rotate_left(node)

    def __balance_factor(self, node):
        """A diferença entre a altura da criança esquerda e a altura da criança direita"""
        if not node:
            return 0
        return self.__calculate_height(node.left) - self.__calculate_height(node.right)

    def __rotate_left(self, node):
        temp_right_node = node.right
        t = node.right.left

        # atualização das referências
        temp_right_node.left = node
        node.right = t

        # atualizar o relacionamento filho-pai
        temp_parent = node.parent
        temp_right_node.parent = temp_parent
        node.parent = temp_right_node
        if t:
            t.parent = node

        # atualizar o relacionamento entre pais-filhos
        if temp_right_node.parent:   # Se não for o nó da raiz
            if temp_right_node.parent.left == node:
                temp_right_node.parent.left = temp_right_node
            elif temp_right_node.parent.right == node:
                temp_right_node.parent.right = temp_right_node
        # se for o nó da raiz
        else:
            self.__root = temp_right_node

        # atualizar a altura dos nós
        node.height = max(self.__calculate_height(node.left), self.__calculate_height(node.right)) + 1
        temp_right_node.height = max(self.__calculate_height(temp_right_node.left),
                                     self.__calculate_height(temp_right_node.right)) + 1

        print(f"rotação esquerda em {node.data}...")

    def __rotate_right(self, node):
        temp_left_node = node.left
        t = node.left.right

        # atualizar as referências
        temp_left_node.right = node
        node.left = t

        # da criança aos pais
        temp_parent = node.parent
        temp_left_node.parent = temp_parent
        node.parent = temp_left_node
        if t:
            t.parent = node

        # de pai para filho
        if temp_left_node.parent:
            if temp_left_node.parent.left == node:
                temp_left_node.parent.left = temp_left_node
            elif temp_left_node.parent.right == node:
                temp_left_node.parent.right = temp_left_node
        else:
            self.__root = temp_left_node

        # atualizar a altura dos nós
        node.height = max(self.__calculate_height(node.left), self.__calculate_height(node.right)) + 1
        temp_left_node.height = max(self.__calculate_height(temp_left_node.left),
                                    self.__calculate_height(temp_left_node.right)) + 1

        print(f"rotação à direita em {node.data}...")

    def traverse(self):
        if self.__root:
            self.__in_order(self.__root)

    def __in_order(self, node):
        """esquerda -> pai -> direita"""
        if node.left:
            self.__in_order(node.left)

        print(node.data)

        if node.right:
            self.__in_order(node.right)

    def find(self, data):
        if self.__root:
            return self.__find_data(data, self.__root)

    def __find_data(self, data, node):
        try:
            # procuramos os dados
            if data < node.data:
                if node.left:
                    return self.__find_data(data, node.left)
            elif data > node.data:
                if node.right:
                    return self.__find_data(data, node.right)
            elif data == node.data:
                return 'Encontrado: %d'% data
            return 'Não encontrado'
        except TypeError:
            return "Parametro Incorreto!"

    def min(self):
        if self.__root:
            return self.__find_min(self.__root)

    def __find_min(self, node):
        """precisamos encontrar o nó de modo esquerdo"""
        if node.left:
            return self.__find_min(node.left)
        return node.data

    def max(self):
        if self.__root:
            return self.__find_max(self.__root)

    def __find_max(self, node):
        """precisamos encontrar o nó mais correto"""
        if node.right:
            return self.__find_max(node.right)
        return node.data


if __name__ == "__main__":
    tree = AVLTree()

    tree.insert(12)
    tree.insert(24)
    tree.insert(10)
    tree.insert(0)
    tree.insert(-2)
    tree.insert(20)
    tree.insert(21)
    tree.insert(19)
    tree.insert(-6)
    tree.insert(-3)
    tree.insert(-10)
    tree.remove(12)

    print(tree.find(24))
    print(tree.find(12))
    print(f"minimo: {tree.min()}")
    print(f"maximo: {tree.max()}")
    tree.traverse()
